# Зависимости
# Python 3.8 https://www.python.org/downloads/
# pip install pymorphy2
# pip install -U pymorphy2-dicts-ru русский словарь

import pymorphy2
from pymorphy2.shapes import restore_capitalization #возвращает заглавные буквы после преобразования
import re
import csv
import argparse


# Запуск анализатора морф
morph = pymorphy2.MorphAnalyzer()

sourcecol = 'фамилия_неделимо' # столбец со строками для обработки
rescols = ['адресатИП'] # столбцы, куда надо будет записать данные

exclusions_phrase = {
    'Предводителям дворянства по делу мировых посредников' : 'Предводители дворянства по делу мировых посредников',
    'Посольству британской империи' : 'Посольство британской империи',
    'Конференции Медико-хирургической академии' : 'Конференция Медико-хирургической академии',
    'Обществу истории древностей' : 'Общество истории древностей',
    'председателю Общества любителей российской словесности' : 'председатель Общества любителей российской словесности',
    'Петербургскому цензурному комитету' : 'Петербургский цензурный комитет',
    '«Вольному обществу любителей росс. словесн.»' : '«Вольное общество любителей росс. словесн.»',
    'Правлению кассы взаимопомощи при Об-ве пособия нуждающимся литераторам и ученым' : 'Правление кассы взаимопомощи при Об-ве пособия нуждающимся литераторам и ученым',
    'другим организаторам Гейдельбергской читальни' : 'другие организаторы Гейдельбергской читальни',
    'Н. М. Карамзину/П. А. Плетневу/В. И. Далю' : 'Н. М. Карамзин/П. А. Плетнев/В. И. Даль',
    'Правлению Пензенской общественной библиотеки' : 'Правление Пензенской общественной библиотеки',
    'Предводителю дворянства Софийского уезда С.-Петербургской губернии' : 'Предводитель дворянства Софийского уезда С.-Петербургской губернии',
    'Комитету взаимопомощи русским писателям' : 'Комитет взаимопомощи русским писателям',
    'Об-ву любителей росс. словесн. при Моск. ун-те' : 'Об-во любителей росс. словесн. при Моск. ун-те',
    'Лондонскому ученому обществу' : 'Лондонское ученое общество',
    'кружку его имени' : 'кружок его имени',
    'Министру юстиции' : 'Министр юстиции',
    'Письмо к редактору' : 'Письмо к редактору',
}

exclusions_word = {
    'Анке' : 'Анке',
    'Остен-Сакену' : 'Остен-Сакен',
    'Де-Пуле' : 'Де-Пуле',
    'Щербаню' : 'Щербань',
    'Львову-Рогачевскому' : 'Львов-Рогачевский',
    'Гаевскому' : 'Гаевский',
    'Коршу' : 'Корш',
    'Огаревой' : 'Огарева',
    'Пущину' : 'Пущин',
    'Ешевскому' : 'Ешевский',
    'Вельяминову' : 'Вельяминов',
    'Рейнике' : 'Рейнике',
    'Казимирскому' : 'Казимирский',
    'Эриксену' : 'Эриксен',
    'Гречу' : 'Греч',
    'Далю' : 'Даль',
    'городовой' : 'городовая',
    'Хавскому' : 'Хавской',
    'Михайловскому-Данилевскому' : 'Михайловский-Данилевский',
    'Кавелину' : 'Кавелин',
    'Кеппену' : 'Кеппен',
    'Оленину' : 'Оленин',
    'Прокоповичу-Антонскому' : 'Прокопович-Антонский',
    'Полетике' : 'Полетика',
    'Южину-Сумбатову' : 'Южин-Сумбатов',
    'Посьету' : 'Посьет',
    'Языковым' : 'Языковы',
    'Кукурановой' : 'Кукуранова',
    'Ясинскому' : 'Ясинский',
    'Муравьеву-Карскому' : 'Муравьев-Карский',
    'Прокоповичу-Аншскому' : 'Прокопович-Аншский',
    'Путяте' : 'Путята',
    'Копишу' : 'Копиш',
    'Зейдлицу' : 'Зейдлиц',
    'Середе' : 'Серед',
    'Щуцкому' : 'Щуцкой',
    'Салтыковой-Дельвиг' : 'Салтыкова-Дельвиг',
    'Ростопчину' : 'Ростопчин',
    'Вальковой' : 'Валькова',
    'Ливену' : 'Ливен',
    'Кологривовой' : 'Кологривова',
    'Мальтицу' : 'Мальтиц',
    'Шези' : 'Шези',
    'Протасовой-Мойер' : 'Протасова-Мойер',
    'Литке' : 'Литке',
    'Родзянке' : 'Родзянке',
    'Фовицкому' : 'Фовицкий',
    'Пругавину' : 'Пругавин',
    'Ливену' : 'Ливен',
    'Жоффре' : 'Жоффр',
    'Нелединскому-Мелецкому' : 'Нелединский-Мелецкий',
    'Плеве' : 'Плеве',
    'Огаревым' : 'Огаревы',
    'Матрене Прокофьевне' : 'Матрена Прокофьевна',
    'Кавелину' : 'Кавелин',
    'П-ой' : '',
    'Диллону' : 'Диллон',
    'Ширинскому-Шихматову' : 'Ширинский-Шихматов',
    'Вельяминову-Зернову' : 'Вельяминов-Зернов',
    'Эсвальду' : 'Эсвальд',
    'Шелгуновым' : 'Шелгуновы',
    'Еврейновой' : 'Еврейнова',
    'Мамину-Сибиряку' : 'Мамин-Сибиряк',
    'Сергеенке' : 'Сергеенко',
    'К издателям' : 'Издатели',
    'К-ой' : '',
    'Пассек' : 'Пассек',
    'Пановскому' : 'Пановский',
    'Глинке-Маврину' : 'Глинка-Маврин',
    'Пеку' : 'Пеку',
    'Ивину' : 'Ивин',
    'Кушелеву-Безбородко' : 'Кушелев-Безбородко',
    'Приклонскому' : 'Приклонский',
    'Куруте' : 'Курута',
    'Южину' : 'Южин',
    'Шассену' : 'Шассен',
    'Галкину-Враскому' : 'Галкин-Враской',
    'К-у' : '',
    'Эльсницу' : 'Эльсниц',
    'Лучицкому' : 'Лучицкий',
    'Лучицким' : 'Лучицкие',
    'Гарину-Михайловскому' : 'Гарин-Михайловский',
    'Витте' : 'Витте',
    'Грену' : 'Грен',
    'Бюрти' : 'Бюрти',
    'Лобанову-Ростовскому' : 'Лобанов-Ростовский',
    'Крамскому' : 'Крамской',
    'Львовой' : 'Львова',
    'Миницкому' : 'Миницкий',
    'Заблоцкому-Десятовскому' : 'Заблоцкий-Десятовский',
    'Межову' : 'Межов',
    'Винницкой-Будзианик' : 'Винницкая-Будзианик',
    'Марко Вовчку' : 'Марко Вовчок',
    'Ревелиоти' : 'Ревелиоти',
    'Руссову' : 'Руссов',
    'Билибину' : 'Билибин',
    'Шереметевой' : 'Шереметева',
    'Иезбере' : 'Иезбера',
    'Ширинскому-Шахматову' : 'Ширинский-Шахматов',
    'Апрелевой' : 'Апрелева',
    'Анне Павловне' : 'Анна Павловне',
    'Варлааму' : 'Варлаам',
    'Горголи' : 'Горголи',
    'Войтеховичу-Челаковскому' : 'Войтехович-Челаковский',
    'Репниной' : 'Репнина',
    'Погожевой' : 'Погожева',
    'Пругавину' : 'Пругавин',
    'Немировичу-Данченко' : 'Немирович-Данченко',
    'Языковой' : 'Языкова',
}
# '' : '',
#????????????????В типографский ящик «Сына отечества» и «Северного архива»

# Поиск наличия хотя бы одного из тегов в списке тегов слова
def test_tag_list(_keys, _tags):
    for key in _keys:
        if key in _tags:
            return True
    return False

def convert_to_ip(_person):
    lst = _person.split() # разделяем ячейку на отдельные слова
    InQuotes=False
    words = []
    # Если фраза есть в списке исключений
    if exclusions_phrase.get(_person):
        phrase=exclusions_phrase.get(_person) # Забираем готовую форму ИП
        return { rescols[0] : phrase }

    for cur_word in lst:
        ShouldSkip=False
        word=cur_word

        if cur_word.startswith('«'):
            InQuotes=True

        if InQuotes:
            ShouldSkip=True
        
        if cur_word.endswith('»'):
            InQuotes=False

        # Если слово заканчивается на точку - пропускаем, сокращение
        if word.endswith('.') or ShouldSkip:
            words.append(cur_word)
            continue

        # Проверяем на дополнительный символ в конце слова (скобка,запятая,точка запятой). Если найден - отпиливаем. И запоминаем, чтобы вернуть в конце
        HasEndSym=False
        if re.findall(r'[,;\)\]»\"\']$',word):
            HasEndSym=True
            EndSymSave=word[-1]
            word=word[:-1]

        #Проверяем, запоминаем если есть и отпиливаем небуквенный символ в начале слова
        HasBeginSym=False
        if re.findall(r'^[«\'\"\[\(]',word):
            HasBeginSym=True
            BeginSymSave=word[0]
            word=word[1:]

        # Если слово есть в списке исключений
        if exclusions_word.get(word):
            word=exclusions_word.get(word) # Забираем готовую форму ИП
            if HasEndSym: # если был символ в конце - возвращаем
                word=word+EndSymSave
            if HasBeginSym: # если был символ в начале - возвращаем
                word=BeginSymSave+word
            words.append(word) # добавляем в результирующий список
            continue
        
        # Пропускаем слова из одной буквы (инициалы, союзы и проч)
        # Добавляем их в результирующий массив без изменений
        if len(word)==1:
            words.append(cur_word)
            continue

        parsed = morph.parse(word)  # вызываем разбор слова в pymorphy
        p=None
        
        for variant in parsed:
            # Смотрим варианты разбора, определяем более подходящий
            # тот, у которого будет хотя бы один из заданных тегов
            # и дательный падеж
            if test_tag_list(['datv'],variant.tag): # and test_tag_list(keys_poss_fio, variant.tag):
                p=variant
                break

        if p and p.inflect({'nomn'}):
            res=p.inflect({'nomn'}).word # приводим слово в И.П. (число не меняем)

            res=restore_capitalization(res,word) #Возвращаем заглавные буквы где они были

            if HasEndSym: # если был символ в конце - возвращаем
                res=res+EndSymSave
            if HasBeginSym: # если был символ в начале - возвращаем
                res=BeginSymSave+res

            words.append(res) # добавляем в результирующий список
        else:
            words.append(cur_word)


    return { rescols[0] : ' '.join(words) }

def main():

    parser = argparse.ArgumentParser(prog='Personalii convert', description='Extract personalies into another column and/or modify them')
    parser.add_argument('infile',  type=argparse.FileType('r', encoding='utf-8-sig'), nargs='?',
                    help='csv file for processing', default="../data/muratova_res5.csv")
    parser.add_argument('outfile', type=argparse.FileType('w', encoding='utf-8-sig'), nargs='?',
                    help='csv file for output', default="../data/muratova_res6.csv")
    args = parser.parse_args()
    infile=args.infile.name
    outfile=args.outfile.name

    with open(infile, newline='', encoding='utf-8-sig') as datafile:
        reader = csv.DictReader(datafile, delimiter=';')
        res_fieldnames=reader.fieldnames+rescols
        with open(outfile, "w", newline='', encoding='utf-8-sig') as resfile:
            writer = csv.DictWriter(resfile, fieldnames=res_fieldnames, delimiter=';')
            writer.writeheader()
        for line in reader:
            cell=line[sourcecol]
            if cell: 
                extracted_data=convert_to_ip(cell)
            else:
                extracted_data={ rescols[0]:"" }

            line.update(extracted_data)
            with open(outfile, "a", newline='', encoding='utf-8-sig') as resfile:
                writer = csv.DictWriter(resfile, fieldnames=res_fieldnames, delimiter=';')
                writer.writerow(line)


if __name__ == '__main__':
    main()